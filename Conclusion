HeteroCL (Heterogeneous Computing Language) is a high-level programming language designed for heterogeneous computing platforms. 
It is developed to facilitate the design and optimization of algorithms for systems that include diverse processing elements, such as CPUs, GPUs, FPGAs, and other accelerators.
In HeteroCL, customizations refer to the process of modifying or tuning certain aspects of the code to improve performance or achieve specific design goals. 
There are three customizations in HeteroCL: 
1) Compute customization which is further categorized into two types: a) loop transformation and b) parallelism
2) Data customization which is further categorized into two types: a) loop transformation and b) parallelism
3) Memory customization 
By providing flexible customization options, HeteroCL empowers developers to optimize their applications for 
different hardware targets while maintaining portability and productivity

I have implemented a naive implementation of a compute kernel that will accept five matrices 
A (P X Q), B (Q x R), C (R x S), D (S x T), E (P, T), and F (P, T) and 
will compute F = alpha * A.B * beta * C.D + gamma * E, where alpha, beta, and gamma are three floating point constants and incorporated both Compute and Data customizations into the naive compute kernel. 
Through testing, I have demonstrated that these customizations significantly enhance performance. 
To quantify the improvement, I utilized the time command in Linux to measure the execution time both with and without customization, enabling a direct comparison.

